import streamlit as st
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from datetime import datetime
import os


# ---------------- Page Setup ----------------
st.set_page_config(
    page_title="üíä ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï ‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü",
    layout="wide",
    page_icon="üíä"
)

# ---------------- Header ----------------
st.title("üíä ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï ‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü")
st.subheader("‡¶∞‡ßã‡¶ó‡ßÄ‡¶∞ ‡¶â‡¶™‡¶∏‡¶∞‡ßç‡¶ó ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂")
st.markdown("---")

# ---------------- Chat Log Storage ----------------
if not os.path.exists("chat_logs"):
    os.makedirs("chat_logs")

def save_chat_log(patient_question, bot_answer):
    now = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    df = pd.DataFrame([[patient_question, bot_answer, now]], columns=["‡¶∞‡ßã‡¶ó‡ßÄ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®", "‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü ‡¶â‡¶§‡ßç‡¶§‡¶∞", "‡¶∏‡¶Æ‡¶Ø‡¶º"])
    file_path = f"chat_logs/chat_log_{now}.csv"
    df.to_csv(file_path, index=False)
    return file_path

# ---------------- Load Predefined Symptoms ----------------
symptom_df = pd.read_csv("symptom_responses.csv")
questions = symptom_df["‡¶â‡¶™‡¶∏‡¶∞‡ßç‡¶ó/‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®"].tolist()
answers = symptom_df["‡¶â‡¶§‡ßç‡¶§‡¶∞"].tolist()

# ---------------- NLP Function ----------------
vectorizer = TfidfVectorizer()
vectorizer.fit(questions)

def get_bot_response(user_question):
    all_vectors = vectorizer.transform([user_question] + questions)
    similarity = cosine_similarity(all_vectors[0:1], all_vectors[1:]).flatten()
    index = similarity.argmax()
    if similarity[index] < 0.2:  # threshold for unknown
        return "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶™‡¶∏‡¶∞‡ßç‡¶ó ‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶õ‡¶ø ‡¶®‡¶æ‡•§ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¨‡¶≤‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶°‡¶æ‡¶ï‡ßç‡¶§‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®‡•§"
    else:
        return answers[index]

# ---------------- Chat Input ----------------
patient_question = st.text_area("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶™‡¶∏‡¶∞‡ßç‡¶ó ‡¶¨‡¶æ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º)", placeholder="‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶•‡¶æ ‡¶¨‡ßç‡¶Ø‡¶•‡¶æ ‡¶ï‡¶∞‡¶õ‡ßá")
if st.button("‡¶™‡ßç‡¶∞‡ßá‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®"):
    if patient_question.strip() == "":
        st.warning("‚ö†Ô∏è ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§")
    else:
        bot_answer = get_bot_response(patient_question)
        st.markdown(f"**‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü ‡¶â‡¶§‡ßç‡¶§‡¶∞:** {bot_answer}")
        log_file = save_chat_log(patient_question, bot_answer)
        st.success("‚úÖ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶≤‡¶ó ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
        with open(log_file, "rb") as f:
            st.download_button(
                "üì• ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶≤‡¶ó ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®",
                data=f,
                file_name=f"chat_log_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.csv",
                mime="text/csv"
            )

# ---------------- Appointment Booking ----------------
st.markdown("---")
st.subheader("‡¶°‡¶æ‡¶ï‡ßç‡¶§‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶¨‡ßÅ‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®")
appointment_name = st.text_input("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ")
appointment_date = st.date_input("‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ")
if st.button("‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶¨‡ßÅ‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®"):
    if appointment_name.strip() == "":
        st.warning("‚ö†Ô∏è ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§")
    else:
        now = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        df_appt = pd.DataFrame([[appointment_name, str(appointment_date), now]], columns=["‡¶®‡¶æ‡¶Æ", "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ", "‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º"])
        appt_file = f"chat_logs/appointment_{now}.csv"
        df_appt.to_csv(appt_file, index=False)
        st.success(f"‚úÖ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßÅ‡¶ï ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ({appointment_date})")
        with open(appt_file, "rb") as f:
            st.download_button(
                "üì• ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®",
                data=f,
                file_name=f"appointment_{now}.csv",
                mime="text/csv"
            )

# ---------------- Footer ----------------
st.markdown("---")
st.markdown("<p style='text-align:center; color:gray;'>¬© 2025 Md Junayed Bin Karim</p>", unsafe_allow_html=True)
